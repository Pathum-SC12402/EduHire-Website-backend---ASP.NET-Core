// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(AppDB))]
    partial class AppDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.model.teacherModels.TeacherAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TeacherAccounts", (string)null);
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherCertificates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CertificateName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CertificateUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("TeacherDataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherDataId");

                    b.ToTable("TeacherCertificates", (string)null);
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Age")
                        .HasColumnType("longtext");

                    b.Property<string>("CVUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CoverPictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SpecializedArea")
                        .HasColumnType("longtext");

                    b.Property<int>("TeacherAccountId")
                        .HasColumnType("int");

                    b.Property<string>("TeachingSide")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("TeacherAccountId")
                        .IsUnique();

                    b.ToTable("TeacherData", (string)null);
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherCertificates", b =>
                {
                    b.HasOne("backend.model.teacherModels.TeacherData", "TeacherData")
                        .WithMany("Certificates")
                        .HasForeignKey("TeacherDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherData");
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherData", b =>
                {
                    b.HasOne("backend.model.teacherModels.TeacherAccount", "TeacherAccount")
                        .WithOne("TeacherData")
                        .HasForeignKey("backend.model.teacherModels.TeacherData", "TeacherAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeacherAccount");
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherAccount", b =>
                {
                    b.Navigation("TeacherData");
                });

            modelBuilder.Entity("backend.model.teacherModels.TeacherData", b =>
                {
                    b.Navigation("Certificates");
                });
#pragma warning restore 612, 618
        }
    }
}
